(undo-tree-save-format-version . 1)
"c1896c909e7271d9aab4a8781aa32787448ef46f"
[nil nil nil nil (26130 39467 928569 874000) 0 nil]
([nil nil ((89 . 92) (#("full" 0 4 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx)) . 89) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -3) (t 26125 377 527230 702000)) nil (26130 39467 928568 954000) 0 nil])
([nil nil ((188 . 189) 92) nil (26130 39467 928552 964000) 0 nil])
([nil nil ((114 . 125) (t 26130 39467 933459 425000)) nil (26130 40077 28881 745000) 0 nil])
([nil nil ((125 . 134) (t 26130 40078 31351 510000)) nil (26130 40635 605218 249000) 0 nil] [nil nil ((125 . 134) (t 26130 39760 837395 124000)) ((#(" relative" 0 9 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx)) . 125) (undo-tree-id3 . -9) (undo-tree-id4 . -9) (undo-tree-id5 . -9) (undo-tree-id6 . -9) (undo-tree-id7 . -8) (undo-tree-id8 . -8) (undo-tree-id9 . -8) (undo-tree-id10 . -8) (undo-tree-id11 . -8) (undo-tree-id12 . -8) (t 26130 40072 364674 979000)) (26130 40072 362003 209000) 0 nil])
([nil nil ((178 . 179) (176 . 178) (t 26130 40636 618990 815000) 175) nil (26131 39024 424015 896000) 0 nil] [nil nil ((134 . 141) (t 26130 40102 478060 746000)) ((#(" fixed " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx) 1 7 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx)) . 134) (undo-tree-id153 . 7)) (26130 40635 446488 960000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 187 . 188) (#("
" 0 1 (part-side jsx)) . -1380) (179 . 1381) 178) nil (26131 39024 424015 316000) 0 nil])
([nil nil ((#("relative " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx) 1 2 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx) 2 3 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx) 3 4 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx) 4 5 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx) 5 6 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx) 6 7 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx) 7 8 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx) 8 9 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx)) . 126) (undo-tree-id143 . -8) (undo-tree-id144 . -8) (undo-tree-id145 . 1) (undo-tree-id146 . -7) (undo-tree-id147 . -8) (undo-tree-id148 . -1) (undo-tree-id149 . 7) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -8) (t 26130 40200 984898 943000)) ((126 . 135) (t 26130 40595 895586 573000)) (26130 40595 897908 330000) 0 nil] [nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx)) . -125) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id16 . -1) (undo-tree-id18 . -1) (undo-tree-id20 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id26 . -1) (#("r" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx)) . -126) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id30 . -1) (undo-tree-id32 . -1) (undo-tree-id34 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id40 . -1) (#("e" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx)) . -127) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id44 . -1) (undo-tree-id46 . -1) (undo-tree-id48 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id54 . -1) (#("l" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx)) . -128) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id58 . -1) (undo-tree-id60 . -1) (undo-tree-id62 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id68 . -1) (#("a" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx)) . -129) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id72 . -1) (undo-tree-id74 . -1) (undo-tree-id76 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id82 . -1) (#("t" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx)) . -130) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id86 . -1) (undo-tree-id88 . -1) (undo-tree-id90 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id96 . -1) (#("i" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx)) . -131) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id100 . -1) (undo-tree-id102 . -1) (undo-tree-id104 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id110 . -1) (#("v" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx)) . -132) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id114 . -1) (undo-tree-id116 . -1) (undo-tree-id118 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id124 . -1) (#("e" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx)) . -133) (undo-tree-id125 . -1) (undo-tree-id127 . -1) (undo-tree-id129 . -1) (undo-tree-id131 . -1) (undo-tree-id133 . -1) 134 (t 26130 40142 271463 376000)) ((125 . 134) (t 26130 40158 608158 489000)) (26130 40198 980700 544000) 0 nil])
([nil current ((#("        <div className='w-4/5 h-screen bg-green-600 min-h-full relative'>
this is the third panels
        </div>
	p
" 0 8 (part-side jsx) 8 9 (font-lock-face web-mode-html-tag-bracket-face tag-beg 17 tag-type start tag-name "div" jsx-depth 1 jsx-beg 1 part-side jsx) 9 12 (font-lock-face web-mode-html-tag-face tag-type start tag-name "div" jsx-depth 1 part-side jsx) 12 13 (tag-type start tag-name "div" jsx-depth 1 part-side jsx) 13 14 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "div" tag-attr t tag-attr-beg 0 jsx-depth 1 part-side jsx) 14 22 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx) 22 23 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx) 23 24 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx) 24 71 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx) 71 72 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr-end 9 tag-attr t jsx-depth 1 part-side jsx) 72 73 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "div" jsx-depth 1 part-side jsx) 73 74 (jsx-depth 1 part-side jsx) 74 78 (jsx-depth 1 part-side jsx) 78 107 (jsx-depth 1 part-side jsx) 107 108 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "div" jsx-depth 1 part-side jsx) 108 109 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "div" jsx-depth 1 part-side jsx) 109 112 (font-lock-face web-mode-html-tag-face tag-type end tag-name "div" jsx-depth 1 part-side jsx) 112 113 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "div" jsx-depth 1 part-side jsx) 113 116 (jsx-depth 1 part-side jsx) 116 117 (jsx-depth 1 part-side jsx)) . 63) (undo-tree-id0 . -115) (undo-tree-id1 . -71) (undo-tree-id2 . -63) (undo-tree-id3 . -62) (undo-tree-id4 . -61) (undo-tree-id5 . -51) (undo-tree-id6 . -28) (undo-tree-id7 . -26) (undo-tree-id8 . -71) (undo-tree-id9 . -71) (undo-tree-id10 . -71) (undo-tree-id11 . -71) (undo-tree-id12 . -71) (undo-tree-id13 . -71) (undo-tree-id14 . -71) (undo-tree-id15 . -71) (undo-tree-id16 . -71) (undo-tree-id17 . -71) (undo-tree-id18 . -71) (undo-tree-id19 . -71) (undo-tree-id20 . -71) (undo-tree-id21 . -113) (undo-tree-id22 . -113) (undo-tree-id23 . -112) (undo-tree-id24 . -112) (undo-tree-id25 . -115) (undo-tree-id26 . -115) (undo-tree-id27 . -115) (undo-tree-id28 . -115) (undo-tree-id29 . -115) (undo-tree-id30 . -115) (undo-tree-id31 . -116) (undo-tree-id32 . -115) (undo-tree-id33 . -8) (undo-tree-id34 . -115) (undo-tree-id35 . -71) (undo-tree-id36 . -8) (undo-tree-id37 . -115) (undo-tree-id38 . -8) (undo-tree-id39 . -117) 71) nil (26131 39068 866625 985000) 0 nil])
nil
([nil nil ((#("u" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx)) . -125) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) 126 (125 . 126) (t 26130 40158 608158 489000)) ((#("u" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "div" tag-attr t jsx-depth 1 part-side jsx)) . 125) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (125 . 126)) (26130 40198 979775 321000) 0 nil])
([nil nil ((nil rear-nonsticky nil 64 . 65) (nil part-side jsx 64 . 65) (nil part-side jsx 63 . 64) (nil part-token string 63 . 64) (nil syntax-table (15) 63 . 64) (nil font-lock-face web-mode-javascript-string-face 63 . 64) (nil part-side jsx 56 . 63) (nil part-token string 56 . 63) (nil font-lock-face web-mode-javascript-string-face 56 . 63) (nil part-side jsx 55 . 56) (nil part-token string 55 . 56) (nil syntax-table (15) 55 . 56) (nil font-lock-face web-mode-javascript-string-face 55 . 56) (nil part-side jsx 54 . 55) (nil part-side jsx 50 . 54) (nil face web-mode-keyword-face 50 . 54) (nil part-side jsx 34 . 50) (nil part-side jsx 28 . 34) (nil face web-mode-keyword-face 28 . 34) (28 . 65) (t 26131 39024 427805 270000)) ((#("import { myFunction } from './utils';" 0 6 (face web-mode-keyword-face part-side jsx) 6 9 (part-side jsx) 9 10 (part-side jsx) 10 11 (part-side jsx) 11 12 (part-side jsx) 12 13 (part-side jsx) 13 14 (part-side jsx) 14 15 (part-side jsx) 15 16 (part-side jsx) 16 17 (part-side jsx) 17 18 (part-side jsx) 18 19 (part-side jsx) 19 22 (part-side jsx) 22 26 (face web-mode-keyword-face part-side jsx) 26 27 (part-side jsx) 27 28 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side jsx) 28 35 (font-lock-face web-mode-javascript-string-face part-token string part-side jsx) 35 36 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side jsx) 36 37 (part-side jsx rear-nonsticky nil)) . 28) (undo-tree-id72 . -9) (undo-tree-id73 . -9) (undo-tree-id74 . -9) (undo-tree-id75 . 27) (undo-tree-id76 . -9) (undo-tree-id77 . -9) (undo-tree-id78 . -9) (undo-tree-id79 . -9) (undo-tree-id80 . -9) (nil syntax-table (15) 55 . 56) (nil syntax-table (15) 63 . 64) (nil rear-nonsticky t 64 . 65)) (26131 39068 650289 354000) 0 nil])
nil
([nil nil ((#("m" 0 1 (part-side jsx)) . 37) (undo-tree-id68 . -1)) ((37 . 38)) (26131 39068 470218 751000) 0 nil])
([nil nil ((#("y" 0 1 (part-side jsx)) . 37) (undo-tree-id64 . 1) (undo-tree-id66 . -1)) ((37 . 38)) (26131 39068 306263 942000) 0 nil])
([nil nil ((#("F" 0 1 (part-side jsx)) . 37) (undo-tree-id61 . 1) (undo-tree-id63 . -1)) ((37 . 38)) (26131 39068 134270 926000) 0 nil])
([nil nil ((#("u" 0 1 (part-side jsx)) . 37) (undo-tree-id58 . 1) (undo-tree-id60 . -1)) ((37 . 38)) (26131 39067 958259 732000) 0 nil])
([nil nil ((#("n" 0 1 (part-side jsx)) . 37) (undo-tree-id55 . 1) (undo-tree-id57 . -1)) ((37 . 38)) (26131 39067 770269 402000) 0 nil])
([nil nil ((#("c" 0 1 (part-side jsx)) . 37) (undo-tree-id52 . 1) (undo-tree-id54 . -1)) ((37 . 38)) (26131 39067 570265 856000) 0 nil])
([nil nil ((#("t" 0 1 (part-side jsx)) . 37) (undo-tree-id49 . 1) (undo-tree-id51 . -1)) ((37 . 38)) (26131 39067 318268 260000) 0 nil])
([nil nil ((#("i" 0 1 (part-side jsx)) . 37) (undo-tree-id46 . 1) (undo-tree-id48 . -1)) ((37 . 38)) (26131 39067 10377 535000) 0 nil])
([nil nil ((#("o" 0 1 (part-side jsx)) . 37) (undo-tree-id43 . 1) (undo-tree-id45 . -1)) ((37 . 38)) (26131 39066 670254 641000) 0 nil])
([nil nil ((#("n" 0 1 (part-side jsx)) . 37) (undo-tree-id40 . 1) (undo-tree-id42 . -1)) ((37 . 38)) (26131 39066 206356 683000) 0 nil])
([nil nil ((37 . 43)) ((#("decode" 0 6 (part-side jsx)) . 37) (undo-tree-id69 . -5) (undo-tree-id70 . -5) (undo-tree-id71 . -5)) (26131 39065 790375 318000) 0 nil])
([nil nil ((61 . 62) 42) ((#("
" 0 1 (part-side jsx)) . 61) (t 26131 39034 664490 124000)) (26131 39034 662267 164000) 0 nil])
nil
